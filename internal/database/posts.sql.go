// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: posts.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (
    id,
    updated_at,
    title,
    url,
    description,
    published_at,
    feed_id
) VALUES (
    $1, -- id
    $2, -- updated_at
    $3, -- title
    $4, -- url
    $5, -- description
    $6, -- published_at
    $7  -- feed_id
)
RETURNING id, created_at, updated_at, title, url, description, published_at, feed_id
`

type CreatePostParams struct {
	ID          uuid.UUID
	UpdatedAt   time.Time
	Title       sql.NullString
	Url         string
	Description sql.NullString
	PublishedAt time.Time
	FeedID      uuid.UUID
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.ID,
		arg.UpdatedAt,
		arg.Title,
		arg.Url,
		arg.Description,
		arg.PublishedAt,
		arg.FeedID,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Url,
		&i.Description,
		&i.PublishedAt,
		&i.FeedID,
	)
	return i, err
}

const getPostsByUser = `-- name: GetPostsByUser :many
SELECT posts.id, posts.title, posts.url, posts.description, users.name as username, posts.published_at, feeds.name as feed_name FROM users
JOIN feed_follows ON users.id = feed_follows.user_id
JOIN posts ON feed_follows.feed_id = posts.feed_id
JOIN feeds ON feeds.id = feed_follows.feed_id
WHERE users.name = $2
ORDER BY posts.published_at DESC
LIMIT $1
`

type GetPostsByUserParams struct {
	Limit    int32
	Username string
}

type GetPostsByUserRow struct {
	ID          uuid.UUID
	Title       sql.NullString
	Url         string
	Description sql.NullString
	Username    string
	PublishedAt time.Time
	FeedName    string
}

func (q *Queries) GetPostsByUser(ctx context.Context, arg GetPostsByUserParams) ([]GetPostsByUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostsByUser, arg.Limit, arg.Username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsByUserRow
	for rows.Next() {
		var i GetPostsByUserRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Url,
			&i.Description,
			&i.Username,
			&i.PublishedAt,
			&i.FeedName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
